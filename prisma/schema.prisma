generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String        @id @default(cuid())
  name        String
  isActive    Boolean?      @default(true)
  tag         String        @unique
  description String?
  subCategory SubCategory[]
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
}

model SubCategory {
  id          String    @id @default(cuid())
  name        String
  tag         String
  isActive    Boolean?  @default(true)
  categoryId  String
  description String?
  image       Image?
  product     Product[]
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Voucher {
  id                String           @id @default(cuid())
  name              String
  description       String?
  type              VoucherType
  isActive          Boolean?         @default(false)
  discountValue     Float
  code              String           @default("GIAMGIANE")
  maxDiscount       Float
  minOrderPrice     Float
  quantity          Int              @default(0)
  quantityForUser   Int              @default(1)
  usedQuantity      Int              @default(0)
  availableQuantity Int              @default(0)
  applyAll          Boolean          @default(false)
  startDate         DateTime
  endDate           DateTime
  pointUser         Int?
  voucherForUser    VoucherForUser[]
  orders            Order[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @updatedAt
  User              User[]
}

model VoucherForUser {
  id              String    @id @default(cuid())
  user            User?     @relation(fields: [userId], references: [id])
  voucher         Voucher?  @relation(fields: [voucherId], references: [id])
  quantityForUser Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  userId          String?
  voucherId       String?

  @@unique([userId, voucherId])
}

model Order {
  id             String      @id @default(cuid())
  originalTotal  Int         @default(0)
  finalTotal     Int         @default(0)
  discountAmount Int         @default(0)
  status         OrderStatus
  transactionId  String?     @default("")
  transDate      DateTime?
  paymentId      String?
  payment        Payment?    @relation(fields: [paymentId], references: [id])
  orderItems     OrderItem[]
  vouchers       Voucher[]
  delivery       Delivery?
  userId         String?
  user           User?       @relation(fields: [userId], references: [id])
  createdAt      DateTime?   @default(now())
  updatedAt      DateTime?   @updatedAt
  invoice        Invoice?
  revenue        Revenue?    @relation(fields: [revenueId], references: [id])
  revenueId      String?

  @@index([userId], map: "Order_usersId_fkey_unique")
}

model Invoice {
  id            String   @id @default(cuid())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  salerId       String?
  invoiceNumber String   @unique
  status        String   @default("PAID")
  currency      String   @default("VND")
  taxCode       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  saler         User?    @relation(fields: [salerId], references: [id])
}

model Delivery {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  phone     String?
  address   Address?
  note      String?
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String    @id @default(cuid())
  productId String
  quantity  Int       @default(1)
  price     Int       @default(0)
  note      String?   @default("")
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([orderId], map: "Order_item_orderId_fkey_unique")
}

model Payment {
  id            String    @id @default(uuid())
  provider      String    @unique
  name          String
  apiKey        String?
  secretKey     String?
  clientId      String?
  clientSecret  String?
  webhookUrl    String?
  webhookSecret String?
  isSandbox     Boolean   @default(true)
  isActive      Boolean   @default(true)
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  order         Order[]
}

model Product {
  id                    String          @id @default(cuid())
  name                  String
  description           String?
  descriptionDetailJson Json?
  descriptionDetailHtml String?         @default("<p>Đang cập nhật</p>")
  price                 Int             @default(0)
  discount              Int             @default(0)
  tag                   String          @unique
  tags                  String[]
  isActive              Boolean?        @default(false)
  region                String
  soldQuantity          Int             @default(0)
  availableQuantity     Int             @default(100)
  rating                Float           @default(5.0)
  totalRating           Int             @default(0)
  orderItem             OrderItem[]
  review                Review[]
  favouriteFood         FavouriteFood[]
  materials             Material[]
  subCategory           SubCategory?    @relation(fields: [subCategoryId], references: [id])
  subCategoryId         String?
  images                Image[]
  createdAt             DateTime?       @default(now())
  updatedAt             DateTime?       @updatedAt

  @@index([subCategoryId], map: "Product_categoryId_fkey_unique")
}

model Material {
  id          String    @id @default(cuid())
  name        String
  tag         String
  category    String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  products    Product[]
}

model Review {
  id        String    @id @default(cuid())
  userId    String
  productId String
  rating    Float     @default(5.0)
  comment   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@index([userId], map: "Review_userId_fkey_unique")
}

model User {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  password         String
  isActive         Boolean          @default(true)
  isVerified       Boolean          @default(false)
  phone            String?          @db.VarChar(10)
  dateOfBirth      DateTime?        @default(now())
  gender           Gender?
  pointUser        Int              @default(0)
  level            UserLevel
  resetToken       String?
  resetTokenExpiry DateTime?
  failedAttempts   Int              @default(0)
  lockedUntil      DateTime?
  isLocked         Boolean          @default(false)
  order            Order[]
  review           Review[]
  favouriteFood    FavouriteFood[]
  revenue          Revenue[]
  image            Image?
  roleId           String?
  role             Role?            @relation(fields: [roleId], references: [id])
  address          Address?
  notifications    Notification[]
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt
  voucherForUser   VoucherForUser[]
  Voucher          Voucher?         @relation(fields: [voucherId], references: [id])
  voucherId        String?
  voucherForUserId String?
  userPermissions  UserPermission[]
  invoice          Invoice[]
}

model Notification {
  id          String    @id @default(cuid())
  user        User[]
  title       String
  message     String
  isRead      Boolean   @default(false)
  isSendToAll Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Address {
  id          String      @id @default(cuid())
  type        AddressType
  provinceId  String?
  districtId  String?
  wardId      String?
  province    String?
  district    String?
  ward        String?
  detail      String?
  postalCode  String?
  fullAddress String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?     @unique
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  delivery    Delivery?   @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  deliveryId  String?     @unique
}

model Restaurant {
  id           String        @id @default(cuid())
  isActive     Boolean       @default(false)
  name         String
  description  String?
  logo         Image?
  email        String        @unique
  phone        String
  website      String?
  socials      Social[]
  banners      Banner[]
  address      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  theme        Theme?
  openingHours OpeningHour[]
}

model OpeningHour {
  id           String     @id @default(cuid())
  restaurantId String
  dayOfWeek    String
  viNameDay    String     @default("Thứ hai")
  openTime     String
  closeTime    String
  isClosed     Boolean    @default(false)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
}

model Theme {
  id             String      @id @default(cuid())
  primaryColor   String      @default("#008b4b")
  secondaryColor String      @default("#f8c144")
  themeMode      String      @default("light")
  fontFamily     String?
  borderRadius   String?
  faviconUrl     String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  restaurantId   String?     @unique
  restaurant     Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([id, restaurantId])
}

model Social {
  id           String      @id @default(cuid())
  platform     String      @unique
  label        String
  value        String
  pattern      String
  isActive     Boolean     @default(true)
  icon         String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String?
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @updatedAt
}

model Banner {
  id           String      @id @default(cuid())
  images       Image[]
  isActive     Boolean
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model Contact {
  id        String      @id @default(cuid())
  fullName  String
  email     String
  phone     String?
  subject   String?
  message   String
  type      TypeContact @default(COLLABORATION)
  responded Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum TypeContact {
  COLLABORATION
  SUPPORT
  FEEDBACK
  OTHER
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  viName      String?
  permissions Permission[]
  users       User[]
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  viName          String?
  description     String?
  roles           Role[]
  userPermissions UserPermission[]
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@unique([userId, permissionId])
}

model Revenue {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  day         Int
  year        Int
  month       Int
  orders      Order[]
  totalSpent  Decimal   @default(0)
  totalOrders Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@unique([userId, year, month, day])
  @@unique([userId, year, month, id])
}

model FavouriteFood {
  id        String    @id @default(cuid())
  userId    String
  productId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, productId])
}

model Image {
  id            String       @id @default(cuid())
  url           String
  altText       String?
  type          ImageType
  entityType    EntityType
  bannerId      String?
  banner        Banner?      @relation(fields: [bannerId], references: [id])
  subCategoryId String?      @unique
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  restaurantId  String?      @unique
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id])
  userId        String?      @unique
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String?
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt

  @@unique([id, subCategoryId, entityType, type])
  @@unique([id, userId, entityType, type])
  @@unique([id, productId, entityType, type])
  @@unique([id, bannerId, entityType, type])
  @@index([subCategoryId, entityType])
  @@index([userId, entityType])
  @@index([productId, entityType])
}

enum ImageType {
  THUMBNAIL
  GALLERY
  LOGO
  BANNER
}

enum EntityType {
  PRODUCT
  USER
  CATEGORY
  RESTAURANT
}

enum VoucherType {
  PERCENTAGE
  FIXED
}

enum PaymentType {
  CREDIT_CARD
  E_WALLET
}

enum OrderStatus {
  COMPLETED
  PENDING
  UNPAID
  CONFIRMED
  SHIPPING
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum AddressType {
  USER
  DELIVERY
}
