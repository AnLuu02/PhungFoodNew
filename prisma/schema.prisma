generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String        @id @default(cuid())
  name        String
  tag         String        @unique
  description String?
  subCategory SubCategory[]
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
}

model SubCategory {
  id          String    @id @default(cuid())
  name        String
  tag         String
  categoryId  String
  description String?
  image       Image?
  product     Product[]
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Voucher {
  id                String      @id @default(cuid())
  name              String
  tag               String      @unique
  description       String?
  type              VoucherType
  discountValue     Float
  maxDiscount       Float
  minOrderPrice     Float
  quantity          Int         @default(0)
  usedQuantity      Int         @default(0)
  availableQuantity Int         @default(0)
  applyAll          Boolean     @default(false)
  startDate         DateTime
  endDate           DateTime
  vipLevel          Int?
  orders            Order[]
  products          Product[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime?   @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  total         Int         @default(0)
  status        OrderStatus
  transactionId String?     @default("")
  transDate     DateTime?
  paymentId     String?
  payment       Payment?    @relation(fields: [paymentId], references: [id])
  orderItems    OrderItem[]
  vouchers      Voucher[]
  delivery      Delivery?
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt

  @@index([userId], map: "Order_usersId_fkey_unique")
}

model Delivery {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  phone     String?
  address   Address?
  note      String?
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  productId String
  quantity  Int     @default(1)
  price     Int     @default(0)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "Order_item_orderId_fkey_unique")
}

model Payment {
  id        String      @id @default(cuid())
  name      String
  tag       String      @unique
  type      PaymentType
  provider  String
  createdAt DateTime?   @default(now())
  isDefault Boolean     @default(false)
  order     Order[]
  revenue   Revenue?    @relation(fields: [revenueId], references: [id])
  revenueId String?
}

model Product {
  id                String          @id @default(cuid())
  name              String
  description       String?
  descriptionDetail String?         @default("")
  price             Int             @default(0)
  discount          Int             @default(0)
  tag               String          @unique
  tags              String[]
  status            ProductStatus
  region            String
  soldQuantity      Int             @default(0)
  availableQuantity Int             @default(100)
  rating            Float           @default(0.0)
  totalRating       Int             @default(0)
  orderItem         OrderItem[]
  review            Review[]
  favouriteFood     FavouriteFood[]
  materials         Material[]
  subCategory       SubCategory?    @relation(fields: [subCategoryId], references: [id])
  subCategoryId     String?
  vouchers          Voucher[]
  images            Image[]
  createdAt         DateTime?       @default(now())
  updatedAt         DateTime?       @updatedAt

  @@index([subCategoryId], map: "Product_categoryId_fkey_unique")
}

enum ProductStatus {
  ACTIVE
  HIDDEN
}

model Material {
  id          String    @id @default(cuid())
  name        String
  tag         String
  category    String
  description String?
  createdAt   DateTime? @default(now())
  products    Product[]
}

model Review {
  id        String    @id @default(cuid())
  userId    String
  productId String
  rating    Float     @default(0.0)
  comment   String?
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@index([userId], map: "Review_userId_fkey_unique")
}

model User {
  id               String          @id @default(cuid())
  name             String
  email            String          @unique
  password         String
  phone            String?         @db.VarChar(10)
  dateOfBirth      DateTime?       @default(now())
  gender           Gender?
  pointLevel       Int             @default(0)
  level            UserLevel
  resetToken       String?
  resetTokenExpiry DateTime?
  order            Order[]
  review           Review[]
  favouriteFood    FavouriteFood[]
  revenue          Revenue[]
  image            Image?
  roleId           String?
  role             Role?           @relation(fields: [roleId], references: [id])
  address          Address?
  notifications    Notification[]
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  user        User[]
  title       String
  message     String
  isRead      Boolean  @default(false)
  isSendToAll Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Address {
  id          String      @id @default(cuid())
  type        AddressType
  provinceId  String?
  districtId  String?
  wardId      String?
  province    String?
  district    String?
  ward        String?
  detail      String?
  postalCode  String?
  fullAddress String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?     @unique
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  delivery    Delivery?   @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  deliveryId  String?     @unique
}

enum AddressType {
  USER
  DELIVERY
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        Image?
  email       String   @unique
  phone       String
  website     String?
  socials     Social[]
  address     String
  openedHours String?
  closedHours String?
  isClose     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Social {
  id           String      @id @default(cuid())
  key          String      @unique
  url          String
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model Banner {
  id        String    @id @default(cuid())
  images    Image[]
  isActive  Boolean
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  permissions Permission[]
  users       User[]
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[]
}

model Revenue {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  date        Int
  year        Int
  month       Int
  totalSpent  Decimal   @default(0)
  totalOrders Int       @default(0)
  createdAt   DateTime  @default(now())
  payment     Payment[]

  @@unique([userId, year, month, date])
  @@unique([userId, year, month])
}

model FavouriteFood {
  id        String    @id @default(cuid())
  userId    String
  productId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())

  @@unique([userId, productId])
}

model Image {
  id            String       @id @default(cuid())
  url           String
  altText       String?
  type          ImageType
  entityType    EntityType
  bannerId      String?
  banner        Banner?      @relation(fields: [bannerId], references: [id])
  subCategoryId String?      @unique
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  restaurantId  String?      @unique
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id])
  userId        String?      @unique
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String?
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([id, subCategoryId, entityType, type])
  @@unique([id, userId, entityType, type])
  @@unique([id, productId, entityType, type])
  @@unique([id, bannerId, entityType, type])
  @@index([subCategoryId, entityType])
  @@index([userId, entityType])
  @@index([productId, entityType])
}

enum ImageType {
  THUMBNAIL
  GALLERY
  LOGO
  BANNER
}

enum EntityType {
  PRODUCT
  USER
  CATEGORY
  RESTAURANT
}

enum VoucherType {
  PERCENTAGE
  FIXED
}

enum PaymentType {
  CREDIT_CARD
  E_WALLET
}

enum OrderStatus {
  COMPLETED
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}
