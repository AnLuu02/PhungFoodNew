import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import { generatePDF } from '~/app/lib/utils/func-handler/generatePDF';

export async function POST(req: NextRequest) {
  try {
    const { to, invoiceData } = await req.json();

    if (!to || !invoiceData) {
      return NextResponse.json({ error: 'Thi·∫øu th√¥ng tin email ho·∫∑c h√≥a ƒë∆°n' }, { status: 400 });
    }

    // üìù T·∫°o PDF
    const pdfBuffer = await generatePDF(invoiceData);

    // üì© C·∫•u h√¨nh SMTP Gmail
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_EMAIL,
        pass: process.env.SMTP_PASSWORD
      }
    });

    // üìß G·ª≠i email
    await transporter.sendMail({
      from: `"Fast Food" <${process.env.SMTP_EMAIL}>`,
      to: to,
      subject: 'H√≥a ƒë∆°n mua h√†ng',
      text: `C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng t·∫°i Fast Food! H√≥a ƒë∆°n c·ªßa b·∫°n c√≥ t·ªïng ti·ªÅn ${invoiceData?.total || 0} VND.`,
      attachments: [
        {
          filename: `invoice-${invoiceData?.id || 'empty'}.pdf`,
          content: pdfBuffer,
          contentType: 'application/pdf'
        }
      ]
    });

    return NextResponse.json({ success: true, message: 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
  } catch (error) {
    console.error('L·ªói khi g·ª≠i email:', error);
    return NextResponse.json({ error: 'L·ªói khi g·ª≠i email' }, { status: 500 });
  }
}
